from collections import deque

def bfs(graph, start_node):
   
    visited = [start_node]
    queue = deque([start_node])
    while queue:
        node = queue.popleft()
        print(node, end=" ")
        for child in graph[node]:
            if child not in visited:
                visited.append(child)
                queue.append(child)
				

def dfs(graph, node, visited=[]):
    visited.append(node)
    print(node, end=" ")
    for child in graph[node]:
        if child not in visited:
            dfs(graph, child, visited)
           

    return visited


# Example graph
graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}

# Call BFS starting from node 'A'
bfs(graph, 'A')

UCS:
from queue import PriorityQueue

def uniform_cost_search(graph, start, goal):
    # initialize the frontier as a priority queue with start node and its cost
    frontier = PriorityQueue()
    frontier.put((0, start))
    
    # initialize an empty explored set
    explored = set()
    
    # initialize an empty dictionary to store the path and its cost
    path_cost = {}
    path_cost[start] = (None, 0)
    
    # iterate until the frontier is empty
    while not frontier.empty():
        # get the node with the lowest path cost
        current_cost, current_node = frontier.get()
        
        # check if current node is the goal node
        if current_node == goal:
            # construct the path from goal to start
            path = []
            while current_node is not None:
                path.append(current_node)
                current_node = path_cost[current_node][0]
            path.reverse()
            return path, current_cost
        
        # add the current node to the explored set
        explored.add(current_node)
        
        # explore the neighbors of the current node
        for neighbor, cost in graph[current_node].items():
            if neighbor not in explored:
                # calculate the path cost from start to neighbor through the current node
                new_cost = current_cost + cost
                
                # check if the neighbor is already in the frontier
                if neighbor not in path_cost or new_cost < path_cost[neighbor][1]:
                    # update the path cost of the neighbor
                    path_cost[neighbor] = (current_node, new_cost)
                    # add the neighbor to the frontier with its path cost as the priority
                    frontier.put((new_cost, neighbor))
    
    # return None if no path is found
    return None

Gredy best 1st Search:
from queue import PriorityQueue

def greedy_best_first_search(graph, start, goal, heuristic):
    visited = set()
    queue = PriorityQueue()
    queue.put((0, start))
    
    while not queue.empty():
        cost, current = queue.get()
        if current == goal:
            return True
        visited.add(current)
        for neighbor in graph[current]:
            if neighbor not in visited:
                priority = heuristic[neighbor]
                queue.put((priority, neighbor))
    
    return False

import heapq

def astar(graph, start, goal, heuristic):
    """
    A* algorithm implementation
    :param graph: dictionary representing the graph
    :param start: starting node
    :param goal: goal node
    :param heuristic: function to calculate heuristic values
    :return: path and cost from start to goal node
    """

    # Initialize open and closed sets
    open_set = []
    closed_set = set()

    # Initialize the start node and add it to the open set
    g_score = {start: 0}
    f_score = {start: heuristic(start, goal)}
    heapq.heappush(open_set, (f_score[start], start))

    while open_set:

        # Get the node with the lowest f_score
        current = heapq.heappop(open_set)[1]

        # Check if we have reached the goal node
        if current == goal:
            path = []
            while current in graph:
                path.append(current)
                current = graph[current]
            path.append(start)
            return path[::-1], g_score[goal]

        # Add the current node to the closed set
        closed_set.add(current)

        # Check the neighbors of the current node
        for neighbor, cost in graph[current].items():
            # Skip the neighbor if it's already in the closed set
            if neighbor in closed_set:
                continue

            # Calculate the tentative g_score for the neighbor
            tentative_g_score = g_score[current] + cost

            # Add the neighbor to the open set if it's not already there
            if neighbor not in [node[1] for node in open_set]:
                heapq.heappush(open_set, (f_score.get(neighbor, float('inf')), neighbor))
            elif tentative_g_score >= g_score.get(neighbor, float('inf')):
                continue

            # Update the g_score and f_score for the neighbor
            graph[neighbor] = current
            g_score[neighbor] = tentative_g_score
            f_score[neighbor] = tentative_g_score + heuristic(neighbor, goal)

    # No path was found
    return None, None

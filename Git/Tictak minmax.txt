# Tic-Tac-Toe Minimax Algorithm
# Create the game board
@1board = [' ' for _ in range(9)]@

@1# Define players
player = 'X'
opponent = 'O'@

# Function to print the board
@1def print_board(board):
    {
    print('-------------')
    for i in range(3):
        {
        print('|', board[i * 3], '|', board[i * 3 + 1], '|', board[i * 3 + 2], '|')
        print('-------------')
        }@

# Function to check for a win
1@def check_win(board):
 {# Rows
        
 for i in range(0, 9, 3):
        {
 if board[i] == board[i + 1] == board[i + 2] != ' ':
            {
 return board[i]
            }}}

{# Columns
for i in range(3):
        {
 if board[i] == board[i + 3] == board[i + 6] != ' ':
            {
 return board[i]
            }}}

{# Diagonals
 if board[0] == board[4] == board[8] != ' ':
 return board[0]
 if board[2] == board[4] == board[6] != ' ':
 return board[2]
 return None}@
        
1@{# Function to check if the board is full
def is_board_full(board):
 return ' ' not in board
}@
        
1@{# Minimax algorithm
def minimax(board, depth, maximizing_player):
 # Base cases - terminal states
 winner = check_win(board)
 if winner:
    {
 if winner == player:
 return 1
    }
 else:
    {
 return -1
    }
 if is_board_full(board):
    {
 return 0
    }
 if maximizing_player:
 max_eval = float('-inf')
 for i in range(9):
    {
 if board[i] == ' ':
        {
 board[i] = player
 eval = minimax(board, depth + 1, False)
 board[i] = ' '
 max_eval = max(max_eval, eval)
        }}
 return max_eval
 else:
 min_eval = float('inf')
 for i in range(9):
    {
 if board[i] == ' ':
        {
 board[i] = opponent
 eval = minimax(board, depth + 1, True)
 board[i] = ' '
 min_eval = min(min_eval, eval)
        }}
 return min_eval@
    
    
# Function to find the best move using the minimax algorithm
1@def find_best_move(board):
 best_eval = float('-inf')
 best_move = -1
 for i in range(9):
    {
 if board[i] == ' ':
        {
 board[i] = player
 eval = minimax(board, 0, False)
 board[i] = ' '
 if eval > best_eval:
            {
 best_eval = eval
 best_move = i
            }}
 return best_move@
        
        

# Function to play the game against the AI
1@def play_game():
 current_player = 'X'
 while True:
        {
 print_board(board)
 if current_player == player:
            {
 position = int(input("Enter a position (1-9): ")) - 1
 if board[position] == ' ':
                {
 board[position] = current_player
 if check_win(board):
                    {
 print_board(board)
                
 print("Player", current_player, "wins!")
 break
                    }
 elif is_board_full(board):
                    {
 print_board(board)
 print("It's a tie!")
 break
                    }
 else:
                    {
 current_player = opponent
                    }}
 else:
 print("Invalid move. Try again.")
            }@
        
        


        



